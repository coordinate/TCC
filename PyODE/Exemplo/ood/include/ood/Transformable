/*!
 * @file Transformable
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2010 - 2017 by Rocco Martino                            *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OOD_TRANSFORMABLE_HPP
#define _OOD_TRANSFORMABLE_HPP




/* ======================================================================= */
#include <ood/OObject>

#include <osg/MatrixTransform>
#include <osg/Drawable>
/* ======================================================================= */




/* ======================================================================= */
namespace osgGA {
    class CameraManipulator ;
}


namespace osgUtil {
    class CullVisitor ;
}
/* ======================================================================= */




namespace ood
{




/* ======================================================================= */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//! A positionable object
class OOD_EXPORT Transformable: public ODEObject
{
/* ======================================================================= */
public:
             Transformable(void) ;
             Transformable(const Transformable& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~Transformable(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    META_Object(ood, Transformable) ;


    //! Divert the visitor to the transform
    /*!
     * assert or SIGSEGV if the osg::MatrixTransform is NULL
     */
    virtual void    accept(osg::NodeVisitor& nv) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    virtual Transformable*      asTransformable(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Set the visibility. Default: treu
    inline void setVisibility( bool visibility ) ;

    //! Get the visibility. Default: treu
    inline bool getVisibility(void) ;

    //! Get the const visibility. Default: treu
    inline bool getVisibility(void) const ;

    //! Set the transform
    inline void     setMatrixTransform(osg::MatrixTransform* transform) ;

    //! Get the transform
    inline osg::MatrixTransform*        getMatrixTransform(void) ;

    //! Get the const transform
    inline const osg::MatrixTransform*  getMatrixTransform(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Invoke the same method on the transform
    inline osg::StateSet*   getOrCreateStateSet(void) ;

    //! Invoke the same method on the transform
    inline osg::StateSet*   getStateSet(void) ;

    //! Invoke the same method on the transform
    inline const osg::StateSet* getStateSet(void) const ;

    //! Invoke the same method on the transform
    inline void     setStateSet(osg::StateSet* stateset) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Set the manipulator
    void        setCameraManipulator(osgGA::CameraManipulator* manipulator) OOD_DEPRECATED ;

    //! Get the manipulator
    inline osgGA::CameraManipulator*        getCameraManipulator(void) OOD_DEPRECATED  ;

    //! Get the const manipulator
    inline const osgGA::CameraManipulator*  getCameraManipulator(void) const OOD_DEPRECATED  ;


    //! Set the manipulator center in relative co. Default [0,0,0]
    /*!
     * Default: [0,0,0]
     */
    inline void     setCameraManipulatorCenter(const osg::Vec3& center) OOD_DEPRECATED  ;

    //! Get the manipulator center in relative co. Default [0,0,0]
    inline const osg::Vec3& getCameraManipulatorCenter(void) const OOD_DEPRECATED  ;


    //! Set the direction of the manipulator in relative co. Default: -Z
    inline void     setCameraManipulatorDirection(const osg::Vec3& direction) OOD_DEPRECATED  ;

    //! Get the direction of the manipulator in relative co. Default: -Z
    inline const osg::Vec3& getCameraManipulatorDirection(void) const OOD_DEPRECATED  ;


    //! Set the up vector. Default: Y
    inline void     setCameraManipulatorUp(const osg::Vec3& up) OOD_DEPRECATED  ;


    //! Get the up vector. Default: Y
    inline const osg::Vec3& getCameraManipulatorUp(void) const OOD_DEPRECATED  ;


    //! Up vector is in relative co? Default: true
    inline void     setCameraManipulatorUpObjectSpace(bool flag) OOD_DEPRECATED  ;

    //! Up vector is in relative co? Default: true
    inline bool     getCameraManipulatorUpObjectSpace(void) const OOD_DEPRECATED  ;


    //! Set the elasticity of the manipulator. Default: 5
    inline void     setCameraManipulatorElasticity(unsigned int elasticity) OOD_DEPRECATED  ;

    //! Get the elasticity of the manipulator. Default: 5
    inline unsigned int getCameraManipulatorElasticity(void) const OOD_DEPRECATED  ;
/* ======================================================================= */









/* ======================================================================= */
public:
    // set the debug node
    inline void setDebugNode( osg::Node* debug_node ) ;

    // get the debug node
    inline osg::Node* getDebugNode(void) ;

    // get the const debug node
    inline const osg::Node* getDebugNode(void) const ;

    inline osg::Node*   getOrCreateDebugNode(void) ;

    virtual osg::Node*  createDebugNode(void) ;

    void    drawDebugNode( osgUtil::CullVisitor* cv ) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    virtual const osg::BoundingSphere&  getBound(void) const ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! Update the camera manipulator
    virtual void    postUpdate(ooReal step_size) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    void    _updateCameraManipulator(ooReal step_size) ;
/* ======================================================================= */




/* ======================================================================= */
private:
    bool            m_visibility ;

    osg::ref_ptr<osg::MatrixTransform>  m_matrix_transform ;

    osg::ref_ptr<osgGA::CameraManipulator>  m_camera_manipulator ;

    osg::Vec3       m_camera_manipulator_center ;
    osg::Vec3       m_camera_manipulator_direction ;
    osg::Vec3       m_camera_manipulator_up ;
    bool            m_camera_manipulator_up_object ;

    osg::Vec3       m_camera_manipulator_center_ws ;
    osg::Vec3       m_camera_manipulator_direction_ws ;
    osg::Vec3       m_camera_manipulator_up_ws ;

    unsigned int    m_camera_manipulator_elasticity ;


    osg::ref_ptr<osg::Node>     m_debug_node ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace ood




#include "Transformable.inl"




#endif /* _OOD_TRANSFORMABLE_HPP */
