/*!
 * @file ControllerBase
 * @author Rocco Martino
 */
/***************************************************************************
 *   Copyright (C) 2012 - 2017 by Rocco Martino                            *
 *   martinorocco@gmail.com                                                *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU Lesser General Public License as        *
 *   published by the Free Software Foundation; either version 2.1 of the  *
 *   License, or (at your option) any later version.                       *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU Lesser General Public License for more details.                   *
 *                                                                         *
 *   You should have received a copy of the GNU Lesser General Public      *
 *   License along with this program; if not, write to the                 *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/

#ifndef _OODUTIL_CONTROLLERBASE_HPP
#define _OODUTIL_CONTROLLERBASE_HPP




/* ======================================================================= */
#include <osgGA/GUIEventHandler>

#include <oodUtil/Signal>
/* ======================================================================= */




namespace oodUtil
{




/* ======================================================================= */
/* ======================================================================= */




/* ======================================================================= */
/* ....................................................................... */
//!
/*!
 */
class OOD_EXPORT ControllerBase: public osgGA::GUIEventHandler
{
/* ======================================================================= */
public:
             ControllerBase(void) ;
             ControllerBase(const ControllerBase& other, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY) ;

protected:
    virtual ~ControllerBase(void) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    META_Object(oodUtil, ControllerBase) ;
/* ======================================================================= */









/* ======================================================================= */
public:
    virtual bool    handle( const osgGA::GUIEventAdapter&   ea,
                            osgGA::GUIActionAdapter&        aa,
                            osg::Object*                    obj,
                            osg::NodeVisitor*               nv) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    //! key, modifier key mask, handled
    inline Signal3<const int, const int, bool>* onKeyPressed(void) ;

    //! key, modifier key mask, handled
    inline Signal3<const int, const int, bool>* onKeyReleased(void) ;



    //! pressed, ndc, handled
    inline Signal3<const bool, const osg::Vec2, bool>*  onLeftMouseButton(void) ;

    //! pressed, ndc, handled
    inline Signal3<const bool, const osg::Vec2, bool>*  onMiddleMouseButton(void) ;

    //! pressed, ndc, handled
    inline Signal3<const bool, const osg::Vec2, bool>*  onRightMouseButton(void) ;

    //! button mask, ndc, handled
    inline Signal3<const int, const osg::Vec2, bool>*   onMouseButton(void) ;



    //! up=true, handled
    inline Signal2<const bool, bool>*       onMouseWheel(void) ;


    //! normalized position, handled
    inline Signal2<const osg::Vec2, bool>*  onMouseMoved(void) ;


    //! normalized position, handled
    inline Signal2<const osg::Vec2, bool>*  onMouseDragged(void) ;



    //! request warp ponter, warp pointer (normalized), handled
    inline Signal3<bool, osg::Vec2, bool>*  onFrame(void) ;
/* ======================================================================= */




/* ======================================================================= */
public:
    inline const osg::Vec2& getCursorPosition(void) const ;
/* ======================================================================= */




/* ======================================================================= */
private:
    osg::ref_ptr< Signal3<const int, const int, bool> > m_on_key_pressed ;
    osg::ref_ptr< Signal3<const int, const int, bool> > m_on_key_released ;

    osg::ref_ptr< Signal3<const bool, const osg::Vec2, bool> >  m_on_left_button ;
    osg::ref_ptr< Signal3<const bool, const osg::Vec2, bool> >  m_on_middle_button ;
    osg::ref_ptr< Signal3<const bool, const osg::Vec2, bool> >  m_on_right_button ;

    osg::ref_ptr< Signal3<const int, const osg::Vec2, bool> >   m_on_button ;

    osg::ref_ptr< Signal2<const bool, bool> >   m_on_mouse_wheel ;

    osg::ref_ptr< Signal2<const osg::Vec2, bool> >  m_on_mouse_moved ;

    osg::ref_ptr< Signal2<const osg::Vec2, bool> >  m_on_mouse_dragged ;

    osg::ref_ptr< Signal3<bool, osg::Vec2, bool> >  m_on_frame ;

    std::map<int, bool>     m_key_down ;
    unsigned int            m_button_mask ;


    bool        m_requesting_warp ;


    osg::Vec2   m_cursor_position ;
/* ======================================================================= */
} ;
/* ....................................................................... */
/* ======================================================================= */




} // namespace oodUtil




#include "ControllerBase.inl"




#endif /* _OODUTIL_CONTROLLERBASE_HPP */
